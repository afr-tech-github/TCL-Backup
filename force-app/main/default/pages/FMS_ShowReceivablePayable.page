<apex:page standardController="FTMSBill__c"
			extensions="FMS_ShowReceivablePayableController"
			recordSetVar="ankenMeisais"
			showHeader="true" sidebar="false">
	<apex:includeScript value="{!URLFOR($Resource.CommonResource, 
								'/CommonResource/Jquery/jquery.min.js')}"/>
	<apex:stylesheet value="{!URLFOR($Resource.CommonResource, '/CommonResource/Jquery-UI/jquery-ui.min.css')}"/>
	<apex:includeScript value="{!URLFOR($Resource.CommonResource, 
								'/CommonResource/Jquery-UI/jquery-ui.min.js')}"/>
	<apex:stylesheet value="{!URLFOR($Resource.CommonResource, '/CommonResource/DataTables/datatables.min.css')}"/>
	<apex:stylesheet value="{!URLFOR($Resource.CommonResource, '/CommonResource/DataTables/select.dataTables.min.css')}"/>
	<apex:includeScript value="{!URLFOR($Resource.CommonResource, '/CommonResource/DataTables/datatables.min.js')}"/>
	<apex:includeScript value="{!URLFOR($Resource.CommonResource, '/CommonResource/DataTables/moment.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.CommonResource, '/CommonResource/DataTables/dataTables.fixedColumns.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.CommonResource, '/CommonResource/DataTables/dataTables.select.js')}"/>
	
	<!-- CSS -->
	<style type="text/css">
		.clsNone, .dateFormat{ display: none; }
		.clsNumber {text-align: right;}
		.clsCenter {text-align: center;}
		.clsTotal {
			text-align: right !important;
			color: red !important;
			font-weight: bold;
			padding-right: 10px !important;
		}
		.clsTitle {
			font-weight: bold;
			font-size: 16px;
			margin: 20px 0px 20px 0px;
		}
		.clsTitleFilter {padding-right: 20px; font-weight: bold;}
		.dataTables_scrollHead {margin-top: 5px !important;}
		.clsTable {
			border-collapse: collapse !important;
			border-spacing: 0 !important;
			width: 100%;
			background: #F1F1F1;
		}
		.clsWrapper {width: 1800px !important; margin-top: 15px;}
		.clsFilter {
			font-weight: bold;
			font-size: 16px;
			padding-right: 20px;
		}

		.clsTable th {text-align: center;}
		.clsTable th, .clsTable td {
			border-width: 1px;
			border-style: solid;
			border-color: #c5c5c5 !important;
			padding: 5px;
		}

		#tbInputData td {
			padding: 5px;
		}

		.clsLabel {font-weight: bold;}
		.clsCustomer {width: 210px;}
		.dataTables_scrollBody {border-bottom: none !important;}
		.dataTables_length {margin-bottom: 10PX;}
		.clsSelected {background-color: #e6f2ff !important;}
		.clsAccountedDate {margin: 0px 20px 0px 20px;}

		.DTFC_LeftHeadWrapper, .DTFC_LeftBodyWrapper {
			border-right: 1px solid #c5c5c5 !important;
		}
		.DTFC_LeftBodyWrapper {
			border-top: 1px solid #c5c5c5 !important;
		}
		.DTFC_LeftBodyLiner {
			overflow: hidden;
		}
		.dataTables_paginate, .dataTables_info {
			margin-top: 20px !important;
		}
	</style>

	<apex:form id="frmMain" styleClass="clsMainForm">
		<c:CLoading />
		<apex:pageMessages id="mainMessages"/>

		<apex:pageBlock id="mainPageBlock">
			<apex:tabPanel switchType="client" id="mainTabPanel"
						value="{!tabNameSelect}" tabClass="tabStyle">
		        <apex:tab label="RECEIVABLE" name="receivableTab" id="receivableTab" 
		        		ontabenter="doChangeTab(true); return false;">
		        	<apex:outputPanel id="panelReceivable" layout="block" rendered="{!isShowReceivable}">
			    		<apex:outputPanel id="panelFilterR" layout="block">
							<table>
								<tr>
									<td class="clsFilter">FILTER</td>
									<td class="clsTitleFilter">AMOUNT SELLING</td>
									<td>greater than</td>
									<td class="clsNumber">
										<apex:inputField styleClass="clsNumber"
											value="{!objAnkenMeisaiFilter.AmountReceivedfromCustomerLocal__c}"
											onchange="doChangeAccount(); return false;"/>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">UNRECEIVED</td>
									<td>greater than</td>
									<td class="clsNumber">
										<apex:inputField styleClass="clsNumber"
											value="{!objAnkenMeisaiFilter.AmountSellingInclTaxAdjustLocal__c}"
											onchange="doChangeAccount(); return false;"/>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">ORDER ID</td>
									<td colspan="2">
										<apex:inputText onchange="doChangeAccount(); return false;"
												styleClass="clsCustomer clsOrderNo"
												value="{!orderNo}"/>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">INVOICE TO</td>
									<td colspan="2">
										<apex:inputField onchange="doChangeAccount(); return false;"
												styleClass="clsCustomer"
												value="{!objAnkenMeisaiFilter.InvoiceTo__c}"/>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">ADVANCE PAYMENT ON-BEHALF-OF CUSTOMER</td>
									<td colspan="2">
										<apex:selectList styleClass="clsAdvance"
														multiselect="false" size="1"
														onchange="doChangeAccount(); return false;">
											<apex:selectOptions value="{!items}"/>
										</apex:selectList>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">LANGUAGE OPTION</td> 
									<td colspan="2">
										<apex:selectList styleClass="clsLanguage"
														multiselect="false" size="1"
														onchange="doChangeLanguage(); return false;">
											<apex:selectOptions value="{!itemsLanguage}"/>
										</apex:selectList>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">ACCOUNTED DATE</td> 
									<td colspan="2">
										From
										<apex:inputField onchange="doChangeAccount(); return false;"
												styleClass="clsAccountedDate clsDateFrom"
												html-autocomplete="off"
												value="{!objAnkenMeisaiFilter.AccountedDate__c}"/>
										To
										<apex:inputField onchange="doChangeAccount(); return false;"
												styleClass="clsAccountedDate clsDateTo"
												html-autocomplete="off"
												value="{!objAnkenMeisaiFilterTo.AccountedDate__c}"/>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">CURRENCY OPTION</td> 
									<td colspan="2">
										<apex:selectList styleClass="clsCurrency"
														multiselect="false" size="1"
														onchange="doChangeCurrency(); return false;">
											<apex:selectOptions value="{!itemsCurrency}"/>
										</apex:selectList>
									</td>
								</tr>
							</table>
						</apex:outputPanel>
												
						<p class="clsTitle">RECEIVABLE</p>
						<apex:outputPanel id="panelReceivableData" layout="block" styleClass="clsWrapper">
							<table id="tbReceivable" class="clsTable">
								<thead>
									<tr>															
										<th colspan="6">BILL INFORMATION</th>
										<th>AMOUNT PROCESSING</th>
										<th colspan="3">LOCAL</th>
										<th colspan="3" class="clsPickCurrency" style="{! IF(objAnkenMeisaiFilterTo.CurrencySelling__c == 'VND','display: none;','')}"></th>
										<th colspan="6">DETAIL PROCESSING</th>
									</tr>
									<tr>
										<th rowspan="2">
											<input type="checkbox" class="clsCheckAll" onclick="doControlCheckAll(this, 'clsCheck');"/>
										</th>							
										<th rowspan="2" style = "position: relative;">BILL ID</th>
										<th rowspan="2">ORDER ID</th>
										<th rowspan="2">JOB REQUEST ID</th>
										<th rowspan="2">HOUSE BILL ID</th>
										<th rowspan="2">ACCOUNTED DATE</th>
										<th rowspan="2">INVOICE TO</th>
										<th rowspan="2">BILL NAME</th>
										<th rowspan="2">RECEIPTANCE CONFIRMATION</th>
										<th>AMOUNT SELLING INCL TAX</th>
										<th>AMOUNT RECEIVED</th>
										<th>UNRECEIVED BALANCE</th>
										<th>AMOUNT SELLING INCL TAX</th>
										<th>AMOUNT RECEIVED</th>
										<th>UNRECEIVED BALANCE</th>
										<th rowspan="2">APPLICANT-SELLING</th>
										<th rowspan="2">TYPE</th>
										<th rowspan="2">SETTLED DATE</th>
										<th rowspan="2">BANK ACCOUNT</th>
										<th rowspan="2">NOTE</th>
										<th rowspan="2">ADVANCE PAYMENT ON-BEHALF-OF CUSTOMER</th>
									</tr>
									<tr class="clsRowTotal">	
										<th class="clsTotal"></th>
										<th class="clsTotal"></th>
										<th class="clsTotal"></th>
										<th class="clsTotal"></th>
										<th class="clsTotal"></th>
										<th class="clsTotal"></th>
									</tr>
								</thead>
                                <tbody class="clsData"></tbody>
							</table>
						</apex:outputPanel>
					</apex:outputPanel>
		    	</apex:tab>

		        <apex:tab label="PAYABLE" name="payableTab" id="payableTab"
		        		ontabenter="doChangeTab(false); return false;">
		        	<apex:outputPanel id="panelPayable" layout="block" rendered="{!NOT(isShowReceivable)}">
						<apex:outputPanel id="panelFilterP" layout="block">
							<table>
								<tr>
									<td class="clsFilter">FILTER</td>
									<td class="clsTitleFilter">AMOUNT BUYING</td>
									<td>greater than</td>
									<td class="clsNumber">
										<apex:inputField styleClass="clsNumber"
											value="{!objAnkenMeisaiFilter.AmountPaidforCustomerLocal__c}"
											onchange="doChangeAccount(); return false;"/>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">UNPAID</td>
									<td>greater than</td>
									<td class="clsNumber">
										<apex:inputField styleClass="clsNumber"
											value="{!objAnkenMeisaiFilter.AmountBuyingInclTaxAdjust_Local__c}"
											onchange="doChangeAccount(); return false;"/>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">ORDER ID</td>
									<td colspan="2">
										<apex:inputText onchange="doChangeAccount(); return false;"
												styleClass="clsCustomer clsOrderNo"
												value="{!orderNo}"/>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">PAYMENT TO</td>
									<td colspan="2">
										<apex:inputField onchange="doChangeAccount(); return false;"
											styleClass="clsCustomer"
											value="{!objAnkenMeisaiFilter.PaymentTo__c}"/>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">ADVANCE PAYMENT ON-BEHALF-OF OUR COMPANY</td>
									<td colspan="2">
										<apex:selectList styleClass="clsAdvance"
														multiselect="false" size="1"
														onchange="doChangeAccount(); return false;">
											<apex:selectOptions value="{!items}"/>
										</apex:selectList>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">LANGUAGE OPTION</td> 
									<td colspan="2">
										<apex:selectList styleClass="clsLanguage"
														multiselect="false" size="1"
														onchange="doChangeLanguage(); return false;">
											<apex:selectOptions value="{!itemsLanguage}"/>
										</apex:selectList>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">ACCOUNTED DATE</td>
									<td colspan="2">
										From
										<apex:inputField onchange="doChangeAccount(); return false;"
												styleClass="clsAccountedDate clsDateFrom"
												value="{!objAnkenMeisaiFilter.AccountedDate__c}"/>
										To
										<apex:inputField onchange="doChangeAccount(); return false;"
												styleClass="	 clsDateTo"
												value="{!objAnkenMeisaiFilterTo.AccountedDate__c}"/>
									</td>
								</tr>
								<tr>
									<td></td>
									<td class="clsTitleFilter">CURRENCY OPTION</td> 
									<td colspan="2">
										<apex:selectList styleClass="clsCurrency"
														multiselect="false" size="1"
														onchange="doChangeCurrency(); return false;">
											<apex:selectOptions value="{!itemsCurrency}"/>
										</apex:selectList>
									</td>
								</tr>
							</table>
						</apex:outputPanel>
						
						<p class="clsTitle">PAYABLE</p>
						<apex:outputPanel id="panelPayableData" layout="block" styleClass="clsWrapper">
							<table id="tbPayable" class="clsTable">
								<thead>
									<tr>						
										<th colspan="6"></th>
										<th>AMOUNT PROCESSING</th>
										<th colspan="3">LOCAL</th>
										<th colspan="3" class="clsPickCurrency"></th>
										<th colspan="6">DETAIL PROCESSING</th>
									</tr>
									<tr>										
										<th rowspan="2">
											<input type="checkbox" class="clsCheckAll" onclick="doControlCheckAll(this, 'clsCheck');"/>
										</th>
										<th rowspan="2">BILL ID</th>
										<th rowspan="2">ORDER ID</th>
										<th rowspan="2">JOB REQUEST ID</th>
										<th rowspan="2">HOUSE BILL ID</th>
										<th rowspan="2">ACCOUNTED DATE</th>
										<th rowspan="2">PAYMENT TO</th>
										<th rowspan="2">BILL NAME</th>
										<th rowspan="2">PAYMENT CONFIRMATION</th>
										<th>AMOUNT BUYING INCL TAX</th>
										<th>AMOUNT PAID</th>
										<th>UNPAID BALANCE</th>
										<th>AMOUNT BUYING INCL TAX</th>
										<th>AMOUNT PAID</th>
										<th>UNPAID BALANCE</th>
										<th rowspan="2">BENEFICIARY-BUYING</th>
										<th rowspan="2">TYPE</th>
										<th rowspan="2">SETTLED DATE</th>
										<th rowspan="2">BANK ACCOUNT</th>
										<th rowspan="2">NOTE</th>
										<th rowspan="2">ADVANCE PAYMENT ON-BEHALF-OF OUR COMPANY</th>
									</tr>
									<tr class="clsRowTotal">	
										<th class="clsTotal"></th>
										<th class="clsTotal"></th>
										<th class="clsTotal"></th>
										<th class="clsTotal"></th>
										<th class="clsTotal"></th>
										<th class="clsTotal"></th>
									</tr>
								</thead>
                                <tbody class="clsData"></tbody>
							</table>
						</apex:outputPanel>
					</apex:outputPanel>
		    	</apex:tab>
		    </apex:tabPanel>

			<!-- POPUP -->
			<apex:outputPanel id="panelPopup" layout="block" styleClass="clsNone">
				<apex:pageMessages id="mainMessagesPopup"/>

				<table id="tbInputData">
					<tr>
						<td class="clsLabel">AMOUNT PROCESSING</td>
						<td>
							<apex:inputField rendered="{!isShowReceivable}"
								value="{!objAnkenMeisaiInput.PaymentConfirmedSelling__c}"/>
							<apex:inputField rendered="{!NOT(isShowReceivable)}"
								value="{!objAnkenMeisaiInput.PaymentConfirmedBuying__c}"/>
						</td>
					</tr>
					<tr>
						<td class="clsLabel">
							<apex:outputText value="APPLICANT-SELLING" rendered="{!isShowReceivable}"/>
							<apex:outputText value="BENEFICIARY-BUYING" rendered="{!NOT(isShowReceivable)}"/>
						</td>
						<td>
							<apex:inputField rendered="{!isShowReceivable}"
								value="{!objAnkenMeisaiInput.ApplicantSelling__c}"/>
							<apex:inputField rendered="{!NOT(isShowReceivable)}"
								value="{!objAnkenMeisaiInput.BeneficiaryBuying__c}"/>
						</td>
					</tr>	
					<tr>
						<td class="clsLabel">TYPE</td>
						<td>
							<apex:inputField rendered="{!isShowReceivable}"
								value="{!objAnkenMeisaiInput.PaymentTypeSelling__c}"/>
							<apex:inputField rendered="{!NOT(isShowReceivable)}"
								value="{!objAnkenMeisaiInput.PaymentTypeBuying__c}"/>
						</td>
					</tr>	
					<tr>
						<td class="clsLabel">SETTLED DATE</td>
						<td>
							<apex:inputField rendered="{!isShowReceivable}"
							value="{!objAnkenMeisaiInput.PaymentSettledDateSelling__c}"/>
							<apex:inputField rendered="{!NOT(isShowReceivable)}"
							value="{!objAnkenMeisaiInput.PaymentSettledDateBuying__c}"/>
						</td>
					</tr>	
					<tr>
						<td class="clsLabel">BANK ACCOUNT</td>
						<td>
							<apex:inputField rendered="{!isShowReceivable}"
							value="{!objAnkenMeisaiInput.BankAccountforReceipt__c}"/>
							<apex:inputField rendered="{!NOT(isShowReceivable)}"
							value="{!objAnkenMeisaiInput.BankAccountforPayment__c}"/>
						</td>
					</tr>	
					<tr>
						<td class="clsLabel">NOTE</td>
						<td>
							<apex:inputField rendered="{!isShowReceivable}"
								value="{!objAnkenMeisaiInput.PaymentNotesSelling__c}"/>
							<apex:inputField rendered="{!NOT(isShowReceivable)}"
								value="{!objAnkenMeisaiInput.PaymentNotesBuying__c}"/>
						</td>
					</tr>	
				</table>			
			</apex:outputPanel>

			<apex:pageBlockButtons location="bottom">
				<apex:commandButton id="btnProcessing" value="Processing"
									status="Waiting"
									onclick="doProcessing(); return false;"
									reRender="mainMessages"/>
				
				<apex:commandButton id="btnCancel" value="Cancel"
									onclick="doCancel(); return false;"/>
			</apex:pageBlockButtons>
		</apex:pageBlock>

		<!-- ACTION FUNCTION -->
		<apex:actionFunction name="afChangeTab"
									action="{!actionChangeTab}"
									reRender="mainMessages, mainTabPanel, panelPopup, refreshJs">
			<apex:param name="isTabShow" value=""/>
		</apex:actionFunction>

		<apex:actionFunction name="afFilter"
									action="{!actionFilter}"
									reRender="mainMessages, panelFilterR, panelFilterP, refreshJs"/>

		<apex:actionFunction name="afProcessing"
								action="{!actionProcessing}"
								reRender="mainMessagesPopup, refreshJs"
								oncomplete="doProcessingComplete();">
			<apex:param name="meisaiIds" value=""/>
		</apex:actionFunction>

		<apex:actionFunction name="afCancel"
								action="{!actionCancel}"
								immediate="true"
								reRender="panelPopup"/>	
		
	</apex:form>

	<!-- JAVASCRIPT -->
	<script type="text/javascript">
		var $j = jQuery.noConflict();

		var USD_CURRENCY = "USD";
		var VND_CURRENCY = "VND";
		var SHOW_ALL = 'Show all';
		var LOCAL = 'Local';
		var localCurrency = "{!localCurrency}";
		var tableData;
		var arrMeisaiId = [];
		var isReceivable = true;
		var isChangePageSize = false;

		var amountSellingInclTaxLocal = 0;
		var amountReceivedLocal = 0;
		var unreceivedBalanceLocal = 0;
		var amountSellingInclTax = 0;
		var amountReceived = 0;
		var unreceivedBalance = 0;

		function doProcessing() {			
			if (isMsgError() == false && arrMeisaiId.length > 0) {
				doShowPopupInputDataUpdate();
			}
		}

		function doProcessingComplete() {			
			if (isMsgError() == false) {
				$j("[id$='panelPopup']").dialog("close");
				$j("[id$='frmMain'] .ui-dialog").remove();  
				$j('.clsCheckAll').prop('checked', true);
				$j('.clsCheckAll').trigger('click');    			
			} else {
				hideLoading();
			}
		}
		
		function doChangeTab(isTabShow) {
			showLoading();
			isChangePageSize = false;
			arrMeisaiId = [];
			amountSellingInclTaxLocal = 0;
			amountReceivedLocal = 0;
			unreceivedBalanceLocal = 0;
			amountSellingInclTax = 0;
			amountReceived = 0;
			unreceivedBalance = 0;
			isReceivable = isTabShow;
			$j('.clsAdvance').val(SHOW_ALL);
			$j('.clsLanguage').val(LOCAL);	
			// $j('.clsCurrency').val(USD);
			afChangeTab(isTabShow);
		}		

		function doCancel() {
			window.close();
		}

		function doChangeAccount() {
			$j('.clsCheckAll').prop('checked', true);
			$j('.clsCheckAll').trigger('click');
			afFilter();
		}

		function doChangeLanguage() {
			$j('.clsCheckAll').prop('checked', true);
			$j('.clsCheckAll').trigger('click');
			afFilter();
		}		

		function doChangeCurrency() {
			$j('.clsCheckAll').prop('checked', true);
			$j('.clsCheckAll').trigger('click');
			afFilter();
		}		

		function isMsgError(){
			if ($j("[id$='mainMessages'], [id$='mainMessagesPopup']").children().length == 0) {
				return false;
			}
			return true;
		}


		function doShowPopupInputDataUpdate() {
			var dlg = $j("[id$='panelPopup'");
			dlg.dialog({
				modal: true
				,autoOpen: false
				,resizable: false
				,width: 500
				,height: 350
				,buttons: [
					{
						text: "Update"
						,click: function() {
							if (arrMeisaiId.length > 0) {
								showLoading();
								var arrMeisaiIds = arrMeisaiId.join(',');
								afProcessing(arrMeisaiIds); 
							}							   		
						}
					}
					,{
						text: "Cancel"
						,click: function() {
							$j(this).dialog("close");	      		
						}
					}
				]
				,close: function() {
					$j("[id$='frmMain'] .ui-dialog").remove();
					afCancel();        
				}
			});

			dlg.parent().appendTo($j("[id$='frmMain']"));
			dlg.dialog('open');
		}

		function doSum(isChecked, obj) {
			if (isReceivable) {
				if (isChecked) {
					if (obj.CurrencySelling__c == localCurrency) {
						amountSellingInclTaxLocal += intVal(obj.AmountSellingInclTaxLocal__c);
					    amountReceivedLocal += intVal(obj.AmountReceivedfromCustomerLocal__c);
					    unreceivedBalanceLocal += intVal(obj.UnreceivedBalanceofSellingLocal__c);
					} else {
					    amountSellingInclTax += intVal(obj.AmountSellingInclTaxFCY__c);
					    amountReceived += intVal(obj.AmountReceivedfromCustomer__c);
					    unreceivedBalance += intVal(obj.UnreceivedBalanceofSellingFCY__c);
					}
				} else {
					if (obj.CurrencySelling__c == localCurrency) {
						amountSellingInclTaxLocal -= intVal(obj.AmountSellingInclTaxLocal__c);
				    	amountReceivedLocal -= intVal(obj.AmountReceivedfromCustomerLocal__c);
				    	unreceivedBalanceLocal -= intVal(obj.UnreceivedBalanceofSellingLocal__c);
					} else {
				    	amountSellingInclTax -= intVal(obj.AmountSellingInclTaxFCY__c);
				    	amountReceived -= intVal(obj.AmountReceivedfromCustomer__c);
				   		unreceivedBalance -= intVal(obj.UnreceivedBalanceofSellingFCY__c);
					}
				}
			} else {
				if (isChecked) {
					if (obj.CurrencyBuying__c == localCurrency) {
						amountSellingInclTaxLocal += intVal(obj.AmountBuyingInclTaxLocal__c);
				    	amountReceivedLocal += intVal(obj.AmountPaidforCustomerLocal__c);
				    	unreceivedBalanceLocal += intVal(obj.UnpaidBalanceofBuyingLocal__c);
					} else {
					    amountSellingInclTax += intVal(obj.AmountBuyingInclTaxFCY__c);
					    amountReceived += intVal(obj.AmountPaidforCustomerFCY__c);
					    unreceivedBalance += intVal(obj.UnpaidBalanceofBuyingFCY__c);
					}
				} else {
					if (obj.CurrencyBuying__c == localCurrency) {
						amountSellingInclTaxLocal -= intVal(obj.AmountBuyingInclTaxLocal__c);
					    amountReceivedLocal -= intVal(obj.AmountPaidforCustomerLocal__c);
					    unreceivedBalanceLocal -= intVal(obj.UnpaidBalanceofBuyingLocal__c);
					} else {
				    	amountSellingInclTax -= intVal(obj.AmountBuyingInclTaxFCY__c);
				    	amountReceived -= intVal(obj.AmountPaidforCustomerFCY__c);
				    	unreceivedBalance -= intVal(obj.UnpaidBalanceofBuyingFCY__c);
					}
				}
			}
		}

		function doSumAll(isChecked, arrObj) {
			amountSellingInclTaxLocal = 0;
		    amountReceivedLocal = 0;
		    unreceivedBalanceLocal = 0;
		    amountSellingInclTax = 0;
		    amountReceived = 0;
		    unreceivedBalance = 0;
		    arrMeisaiId = [];

			if (isChecked) {
				arrObj.each(function(obj) {
				    doSum(true, obj);

				 	var meisaiId = obj.Id;
		      		var index = $j.inArray(meisaiId, arrMeisaiId);

			        if (index === -1){
			        	arrMeisaiId.push(meisaiId);
			        }
				});				
			}
		}

		function doPickCurrency() {
			var th = $j('.clsPickCurrency');
			th.eq(0).html($j('.clsCurrency').val());
		}

		function doShowSum() {
			var th = $j('.clsPickCurrency');
			var tr = $j('.clsRowTotal').find('th');
		    tr.eq(0).html(formatCurrency(amountSellingInclTaxLocal, 0) + ' ' + localCurrency);
		    tr.eq(1).html(formatCurrency(amountReceivedLocal, 0) + ' ' + localCurrency);
		    tr.eq(2).html(formatCurrency(unreceivedBalanceLocal, 0) + ' ' + localCurrency);
			if (th.length === 2) {
				tr.eq(3).html(formatCurrency(amountSellingInclTax, 2)  + ' ' +  $j('.clsCurrency').val());
				tr.eq(4).html(formatCurrency(amountReceived, 2)  + ' ' +  $j('.clsCurrency').val());
				tr.eq(5).html(formatCurrency(unreceivedBalance, 2)  + ' ' +  $j('.clsCurrency').val());
			}
		}

		function intVal(num) {
            return typeof num === 'string' ?
                num.replace(/[\$,]/g, '')*1 :
                typeof num === 'number' ?
                    num : 0;
        };

		function doSetCheckAll(classNameCheckAll, classNameCheck){
			var totalCheckbox = $j('table.DTFC_Cloned .' + classNameCheck).length;           
			if (totalCheckbox > 0 && totalCheckbox == $j('table.DTFC_Cloned .' + classNameCheck + ':checked').length) {
				$j('table.DTFC_Cloned .' + classNameCheckAll).prop('checked', true);
			} else {
				$j('table.DTFC_Cloned .' + classNameCheckAll).prop('checked', false);
			}									
		}
    
		function doControlCheckAll(element, classNameCheck){
            if (tableData != null) {
				var rows = tableData
		        .column(0)
		        .nodes()
		        .to$()
		        .find('.' + classNameCheck);
				
                var isChecked = element.checked;
				$j(".clsData tr td ." + classNameCheck).prop('checked', isChecked);
                
		        if (isChecked) {
		        	rows.parent().parent().addClass('clsSelected');
					$j(".clsData tr").addClass('clsSelected');
		    	} else {
		    		rows.parent().parent().removeClass('clsSelected');
					$j(".clsData tr").removeClass('clsSelected');
		    	}

				doSumAll(isChecked, tableData.data());
				doShowSum();        
             }
        }

		function doControlCheckbox(classNameCheckAll, classNameCheck){
			$j('.' + classNameCheck).click(function () {
				doSetCheckAll(classNameCheckAll, classNameCheck);

				var row = $j(this).closest('tr');
		      	var dataRow = tableData.row(row).data();			
				
		      	var meisaiId = dataRow.Id;
		      	var index = $j.inArray(meisaiId, arrMeisaiId);

		        if (this.checked && index === -1){
		        	arrMeisaiId.push(meisaiId);
		        	row.addClass('clsSelected');
					$j(".clsData tr:eq(" + row.index() + ")").addClass('clsSelected');
		        } else if (!this.checked && index !== -1) {
		        	arrMeisaiId.splice(index, 1);
		        	row.removeClass('clsSelected');
					$j(".clsData tr:eq(" + row.index() + ")").removeClass('clsSelected');
		      	}

		      	doSum(this.checked, dataRow);
 				doShowSum();
			});
		}

		function formatCurrency(decimalValue, lenFix) {
			if (decimalValue == null) {
				return '';
			}

			if (lenFix > 0) {
				return decimalValue.toFixed(lenFix).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
			} else {
				return decimalValue.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
				// return decimalValue.toFixed(lenFix).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
			}
		}

		function getDataTable(isReceivable, amount, upaid, customerId, advance, strDateFrom, strDateTo, orderNo, currencyOption) {
			$j('[id$="Waiting.start"]').show();
			// doPickCurrency();

			Visualforce.remoting.Manager.invokeAction(
				'{!$RemoteAction.FMS_ShowReceivablePayableController.getData}'
				,isReceivable
				,amount
				,upaid
				,customerId
				,advance
				,strDateFrom
				,strDateTo
				,orderNo
				,currencyOption
				,function(data, event) {
					if (event.status && data) {
						if (isReceivable) {
							tableData = initTableReceivable(data);
						} else {
							tableData = initTablePayable(data);
						}
						doPickCurrency();
					} else {
						hideLoading();
					}
				} 
				,{escape: true}
			);
		}


		function initTableReceivable(dataInput) {
			var currencyOption = $j('.clsCurrency').val();
			var isVisibleCol = currencyOption === VND_CURRENCY ? false : true;
			var tableData = $j('#tbReceivable').DataTable({
				data: dataInput
				,scrollY: 250
				,scrollX: true
				,deferRender: true
				,searching: false
				,order: [[1, "DESC"]]
				,orderCellsTop: true
				,info: true
				,destroy: true
				,lengthMenu: [10, 50, 100, 200, 500]
				,pageLength: 100
				,pagingType: "full_numbers"
				,fixedColumns: {
					leftColumns: 6
				}
				,columns: [
				    {data: "", defaultContent: ""}
				    ,{data: "Name", defaultContent: ""}
				    ,{data: "FTMSSO__r.Name", defaultContent: ""}
					,{data: "FTMSSO__r.JobRequestID__c", defaultContent: ""}
					,{data: "FTMSSO__r.House_Bill__c", defaultContent: ""}
					,{data: "FTMSSO__r.AccountedDate__c", defaultContent: ""}
				    ,{data: "InvoiceTo__r.Name", defaultContent: ""}
				    ,{data: "BillNameatPrintLocal__c", defaultContent: ""}
				    ,{data: "PaymentConfirmedSelling__c", defaultContent: false}
				    ,{data: "AmountSellingInclTaxLocal__c", defaultContent: ""}
				    ,{data: "AmountReceivedfromCustomerLocal__c", defaultContent: ""}
				    ,{data: "UnreceivedBalanceofSellingLocal__c", defaultContent: ""}
				    ,{data: "AmountSellingInclTaxFCY__c", defaultContent: ""}
				    ,{data: "AmountReceivedfromCustomer__c", defaultContent: ""}
				    ,{data: "UnreceivedBalanceofSellingFCY__c", defaultContent: ""}
				    ,{data: "ApplicantSelling__r.Name", defaultContent: ""}
				    ,{data: "PaymentTypeSelling__c", defaultContent: ""}
				    ,{data: "PaymentSettledDateSelling__c", defaultContent: ""}
				    ,{data: "BankAccountforReceipt__r.Name", defaultContent: ""}
				    ,{data: "PaymentNotesSelling__c", defaultContent: ""}
				    ,{data: "AdvancePaymentonbehalfofCustomer__c", defaultContent: false}
				]
				,columnDefs: [
					 {
						targets: 0
				    	,orderable: false
				    	,className: "clsCenter"
				        ,checkboxes: {
	                        seletRow: true
	                    }
	                    ,render: function (data, type, row, meta) {
	                        return '<input type="checkbox" class="clsCheck"/>';
	                    }
			     	}
			     	,{
						targets: 1
	                    ,render: function (data, type, row, meta) {
	                        return '<a href="/' + row.Id + '" target="_blabk">' + data + '</a>';
	                    }
			     	}
			     	,{
						targets: 2
	                    ,render: function (data, type, row, meta) {
	                        return '<a href="/' + row.FTMSSO__c + '" target="_blabk">' + data + '</a>';
	                    }
					}
					,{
						targets: 3
	                    ,render: function (data, type, row, meta) {
	                        return data;
	                    }
			     	}
			     	,{
						targets: 4
	                    ,render: function (data, type, row, meta) {
	                        return data;
	                    }
					}
					,{
				    	targets: 5
				    	,className: "clsCenter"
				    	,render: function(data, type, row, meta) {			    		
				    		if (!data || type === 'sort') {
				    			return data;
				    		}

				    		return moment(data).format("DD/MM/YYYY");
				    	}
			     	}
					,{
				    	targets: 7
				    	,render: function (data, type, row, meta) {
							var language = $j('.clsLanguage').val();
							if (language == LOCAL) {
								return row.BillNameatPrintLocal__c;
							} else {
								return row.BillNameatPrintENG__c;
							}			            	
			        	}
			     	}
				    ,{
				    	orderable: false
				    	,targets: 8
				    	,className: "clsCenter"
				    	,render: function (data, type, row, meta) {
			            	return '<input type="checkbox" class="clsNyukinKakuninzumi" disabled />';
			        	}
			     	}
			     	,{
				    	targets:  [9, 10, 11]
				    	,type: "num-fmt"
				    	,className: "clsNumber"
				    	,render: function(data, type, row, meta) {
				    		// if (row.CurrencySelling__c != USD_CURRENCY) {
				    			// return formatCurrency(data, 0);
				    		// }
				    		// return '';
							if (row.CurrencySelling__c != VND_CURRENCY) {
								return formatCurrency(data, 2);
							} else {
								return formatCurrency(data, 0);
							}
				    	}
			     	}
			     	,{
				    	targets:  [12, 13, 14]
				    	,type: "num-fmt"
				    	,className: "clsNumber"
						,visible: isVisibleCol
				    	,render: function(data, type, row, meta) {
				    		// if (row.CurrencySelling__c == USD_CURRENCY) {
				    			// return formatCurrency(data, 2);
				    		// }
				    		// return '';
							if (row.CurrencySelling__c != VND_CURRENCY) {
								return formatCurrency(data, 2);
							} else {
								return formatCurrency(data, 0);
							}
				    	}
			     	}
			     	,{
				    	targets: 17
				    	,className: "clsCenter"
				    	,render: function(data, type, row, meta) {			    		
				    		if (!data || type === 'sort') {
				    			return data;
				    		}
				    		return moment(data).format("DD/MM/YYYY");
				    	}
			     	}
			     	,{
				    	orderable: false
				    	,targets: 20
				    	,className: "clsCenter"
				    	,render: function (data, type, row, meta) {
			            	return '<input type="checkbox" class="clsAdvanceCustomer" disabled />';
			        	}
			     	}
				]
				,drawCallback: function() {
					$j(".clsCheckAll, .clsCheck").unbind();
                    doControlCheckbox('clsCheckAll', 'clsCheck');

					if (isChangePageSize) {
						$j('.clsCheckAll').prop('checked', true);
                        $j('.clsCheckAll').trigger('click');
						isChangePageSize = false;
					}
			    }
			    ,rowCallback: function (row, data) {
		         	$j('.clsNyukinKakuninzumi', row).prop('checked', data.PaymentConfirmedSelling__c == true);

		         	$j('.clsAdvanceCustomer', row).prop('checked', data.AdvancePaymentonbehalfofCustomer__c == true);		         	

				    if ($j.inArray(data.Id, arrMeisaiId) !== -1) {
				      	$j(row).find('.clsCheck').prop('checked', true);
				      	$j(row).addClass('clsSelected');
				    }
		        }
		        ,initComplete: function() {
		        	hideLoading();				    
				}
			});	
			doShowSum();
			
			return tableData;
		}

		function initTablePayable(dataInput) {
			var currencyOption = $j('.clsCurrency').val();
			var isVisibleCol = currencyOption === VND_CURRENCY ? false : true;
			var tableData = $j('#tbPayable').DataTable({
				data: dataInput
				,scrollY: 250
				,scrollX: true
				,deferRender: true
				,searching: false
				,order: [[1, "DESC"]]
				,orderCellsTop: true
				,info: true
				,destroy: true
				,lengthMenu: [10, 50, 100, 200, 500]
				,pageLength: 100
				,pagingType: "full_numbers"
				,fixedColumns: {
					leftColumns: 6
				}
				,columns: [
				    {data: "", defaultContent: ""}
				    ,{data: "Name", defaultContent: ""}
				    ,{data: "FTMSSO__r.Name", defaultContent: ""}
					,{data: "FTMSSO__r.JobRequestID__c", defaultContent: ""}
					,{data: "FTMSSO__r.House_Bill__c", defaultContent: ""}
					,{data: "FTMSSO__r.AccountedDate__c", defaultContent: ""}
				    ,{data: "PaymentTo__r.Name", defaultContent: ""}
				    ,{data: "BillNameatPrintLocal__c", defaultContent: ""}
				    ,{data: "PaymentConfirmedBuying__c", defaultContent: false}
				    ,{data: "AmountBuyingInclTaxLocal__c", defaultContent: ""}
				    ,{data: "AmountPaidforCustomerLocal__c", defaultContent: ""}
				    ,{data: "UnpaidBalanceofBuyingLocal__c", defaultContent: ""}
				    ,{data: "AmountBuyingInclTaxFCY__c", defaultContent: ""}
				    ,{data: "AmountPaidforCustomerFCY__c", defaultContent: ""}
				    ,{data: "UnpaidBalanceofBuyingFCY__c", defaultContent: ""}
				    ,{data: "BeneficiaryBuying__r.Name", defaultContent: ""}
				    ,{data: "PaymentTypeBuying__c", defaultContent: ""}
				    ,{data: "PaymentSettledDateBuying__c", defaultContent: ""}
				    ,{data: "BankAccountforPayment__r.Name", defaultContent: ""}
				    ,{data: "PaymentNotesBuying__c", defaultContent: ""}
				    ,{data: "AdvancePaymentonbehalfofOurCompany__c", defaultContent: false}
				]
				,columnDefs: [
					 {
						targets: 0
				    	,orderable: false
				    	,className: "clsCenter"
				        ,checkboxes: {
	                        seletRow: true
	                    }
	                    ,render: function (data, type, row, meta) {
	                        return '<input type="checkbox" class="clsCheck"/>';
	                    }
			     	}
			     	,{
						targets: 1
	                    ,render: function (data, type, row, meta) {
	                        return '<a href="/' + row.Id + '" target="_blabk">' + data + '</a>';
	                    }
			     	}
			     	,{
						targets: 2
	                    ,render: function (data, type, row, meta) {
	                        return '<a href="/' + row.FTMSSO__c + '" target="_blabk">' + data + '</a>';
	                    }
					}
					,{
						targets: 3
	                    ,render: function (data, type, row, meta) {
	                        return data;
	                    }
			     	}
			     	,{
						targets: 4
	                    ,render: function (data, type, row, meta) {
	                        return data;
	                    }
					}
					,{
						targets: 5
				    	,className: "clsCenter"
				    	,render: function(data, type, full, meta) {
				    		if (!data || type === 'sort') {
				    			return data;
				    		}
				    		return moment(data).format("DD/MM/YYYY");
				    	}
			     	}
					,{
				    	targets: 7
				    	,render: function (data, type, row, meta) {
							var language = $j('.clsLanguage').val();
							if (language == LOCAL) {
								return row.BillNameatPrintLocal__c;
							} else {
								return row.BillNameatPrintENG__c;
							}			            	
			        	}
			     	}
				    ,{
				    	orderable: false
				    	,targets: 8
				    	,className: "clsCenter"
				    	,render: function (data, type, full, meta) {
			            	return '<input type="checkbox" class="clsSiharaiKakuninzumi" disabled />';
			        	}
			     	}
			     	,{
				    	targets:  [9, 10, 11]
				    	,type: "num-fmt"
				    	,className: "clsNumber"
				    	,render: function(data, type, row, meta) {
				    		// if (row.CurrencyBuying__c != USD_CURRENCY) {
				    			// return formatCurrency(data, 0);
				    		// }
				    		// return '';
							if (row.CurrencySelling__c != VND_CURRENCY) {
								return formatCurrency(data, 2);
							} else {
								return formatCurrency(data, 0);
							}
				    	}
			     	}
			     	,{
				    	targets:  [12, 13, 14]
				    	,type: "num-fmt"
				    	,className: "clsNumber"
						,visible: isVisibleCol
				    	,render: function(data, type, row, meta) {
				    		// if (row.CurrencyBuying__c == USD_CURRENCY) {
				    			// return formatCurrency(data, 2);
				    		// }
				    		// return '';
							if (row.CurrencySelling__c != VND_CURRENCY) {
								return formatCurrency(data, 2);
							} else {
								return formatCurrency(data, 0);
							}
				    	}
			     	}
			     	,{
				    	targets: 17
				    	,className: "clsCenter"
				    	,render: function(data, type, full, meta) {
				    		if (!data || type === 'sort') {
				    			return data;
				    		}
				    		return moment(data).format("DD/MM/YYYY");
				    	}
			     	}
			     	,{
				    	orderable: false
				    	,targets: 20
				    	,className: "clsCenter"
				    	,render: function (data, type, row, meta) {
			            	return '<input type="checkbox" class="clsAdvanceCompany" disabled />';
			        	}
			     	}
				]
				,drawCallback: function() {
					$j(".clsCheckAll, .clsCheck").unbind();
					doControlCheckbox('clsCheckAll', 'clsCheck');

					if (isChangePageSize) {
						$j('.clsCheckAll').prop('checked', true);
						$j('.clsCheckAll').trigger('click');
						isChangePageSize = false;
					}
			    }
			    ,rowCallback: function (row, data) {
		         	$j('.clsSiharaiKakuninzumi', row).prop('checked', data.PaymentConfirmedBuying__c == true);

		         	$j('.clsAdvanceCompany', row).prop('checked', data.AdvancePaymentonbehalfofOurCompany__c == true);	

				    if ($j.inArray(data.Id, arrMeisaiId) !== -1) {
				    	$j(row).find('.clsCheck').prop('checked', true);
				    	$j(row).addClass('clsSelected');
				    }					
		        }
		        ,initComplete: function() {					
					hideLoading();
				}
			});	
			doShowSum();
			
			return tableData;
		}

		function showLoading() {
			$j('[id$="Waiting.start"]').show();
		}

		function hideLoading() {
			$j('[id$="Waiting.start"]').hide();
		}

		$j("[id$='panelReceivableData'] .dataTables_scrollBody").scroll(function(e) {
			$j('#tbReceivable').DataTable();
		});

		$j("[id$='panelPayableData'] .dataTables_scrollBody").scroll(function(e) {
			$j('#tbPayable').DataTable();
		});
	</script>
	
	<apex:outputPanel id="refreshJs" layout="block">
		<script type="text/javascript">
			$j(document).ready(function () {
				$j('#tbReceivable, #tbPayable').on('length.dt', function (e, settings, len) {
					isChangePageSize = true;
					tableData.page(0);
				});
				
				if (isMsgError() == false) {
					isShowReceivable = {!isShowReceivable}
					var amount = {!amount};
					var unpaid = {!unpaid};
					var customerId = '{!JSINHTMLENCODE(objAnkenMeisaiFilter.InvoiceTo__c)}';
					var advance = $j('.clsAdvance').val();

					if (isShowReceivable == false) {						
						customerId = '{!JSINHTMLENCODE(objAnkenMeisaiFilter.PaymentTo__c)}';
					}

					var strDateFrom = $j('.clsDateFrom').val();
					var strDateTo = $j('.clsDateTo').val();
					var orderNo = $j('.clsOrderNo').val();
					var currencyOption = $j('.clsCurrency').val();
					
					getDataTable(isShowReceivable, amount, unpaid, customerId, advance, strDateFrom, strDateTo, orderNo, currencyOption);
				}
			});
		</script>
	</apex:outputPanel>
</apex:page>